import type { Metadata } from "next";
import { Geist, Geist_Mono, Inter } from "next/font/google";
import "./globals.css";
import { config } from "../config/appConfig";
import DebugLogsButton from "../components/DebugLogsButton";
import ErrorBoundary from "../components/ErrorBoundary";
import { NotificationProvider } from "../components/NotificationProvider";
import SessionInitializer from "../components/SessionInitializer";
import { StreamConnectionProvider } from "../providers/StreamConnectionProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const generalSans = Inter({
  variable: "--font-general-sans",
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
        {config.externalServices.fontUrl && (
          <link href={config.externalServices.fontUrl} rel="stylesheet" />
        )}
        <meta name="theme-color" content="#474BD4" />
        <meta name="mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-capable" content="yes" />
        <meta name="apple-mobile-web-app-status-bar-style" content="default" />
        <link href="https://api.fontshare.com/v2/css?f[]=general-sans@400,500,600,700&display=swap" rel="stylesheet" />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} ${generalSans.variable} antialiased`}
      >
        <ErrorBoundary>
          <StreamConnectionProvider>
            <NotificationProvider>
              <SessionInitializer />
              {children}
              {/* <DebugLogsButton /> */}
            </NotificationProvider>
          </StreamConnectionProvider>
        </ErrorBoundary>
      </body>
    </html>
  );
}
